// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthUser {
  Id        String   @id @default(uuid())
  email     String   @unique
  password  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  salt      String
  user      User?
}

model User {
  userId         String    @unique
  fullName       String?
  lastname       String?
  phone          String?
  dateOfBirth    DateTime?
  bio            String?
  gender         Gender?
  diagnosis      String?
  address        String?
  healthBarriers String[]  @default([""]) //leave epmty for doctor. used for patients only
  avatarUrl      String?
  timezone       String?
  language       Language  @default(EN)
  year           Int?
  roles          Role      @default(PATIENT)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastActiveAt   DateTime?
  user           AuthUser  @relation(fields: [userId], references: [Id])

  email            String            @unique
  medicalHistory   MedicalHistory?
  userMedications  UserMedications?
  userMeasurements UserMeasurements?

  Event      Event?
  Plan       Plan[]
  Task       Task[]
  TaskEditor TaskEditor[]
  PlanEditor PlanEditor[]
}

enum Gender {
  MALE
  FEMALE
}

enum Language {
  EN
  Arabic
  // Add other languages as needed
}

enum Role {
  PATIENT
  DOCTOR
}

model MedicalHistory {
  Id                     String                  @id @default(uuid())
  historyName            String
  diseases               Disease[]               @relation("MedicalHistoryDisease")
  medicalHistoryDiseases MedicalHistoryDisease[]
  user                   User                    @relation(fields: [userId], references: [userId])
  userId                 String                  @unique
}

model Disease {
  Id                     String                  @id @default(uuid())
  diseaseName            String
  medicalHistoryDiseases MedicalHistoryDisease[]
  histories              MedicalHistory[]        @relation("MedicalHistoryDisease")
  description            String?
}

model Medications {
  Id                   String            @id @default(uuid())
  medicationName       String
  status               Status
  dosage               String
  frequency            String
  prescribingPhysician String // Foreign key for user; need to define a user model
  startDate            DateTime
  endDate              DateTime?
  userMedications      UserMedications[]
}

model UserMedications {
  Id          String        @id @default(uuid())
  user        User          @relation(fields: [userId], references: [userId])
  userId      String        @unique
  medications Medications[]
}

model Measurements {
  Id                 String           @id @default(uuid())
  name               String
  icon               String
  measurementType    MeasurementType
  measurementValue   Int
  measurementUnit    String
  measuredOn         DateTime
  createdAt          DateTime         @default(now())
  UserMeasurements   UserMeasurements @relation(fields: [userMeasurementsID], references: [Id])
  userMeasurementsID String           @unique
}

model UserMeasurements {
  Id           String         @id @default(uuid())
  user         User           @relation(fields: [userId], references: [userId])
  userId       String         @unique
  measurements Measurements[]
}

model Event {
  Id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [userId])
  userId      String   @unique
  date        DateTime
  name        String
  Plan        Plan?    @relation(fields: [planPlan_id], references: [plan_id])
  planPlan_id String?
}

enum MeasurementType {
  weight
  blood_pressure_systolic
  blood_pressure_diastolic
  BMI
}

enum Status {
  Active
  Discontuned
  On_Hold
}

model MedicalHistoryDisease {
  medicalHistoryId String
  diseaseId        String
  medicalHistory   MedicalHistory @relation(fields: [medicalHistoryId], references: [Id])
  disease          Disease        @relation(fields: [diseaseId], references: [Id])

  @@id([medicalHistoryId, diseaseId])
}

model Plan {
  plan_id  String  @id @default(uuid())
  name     String
  owner_id String // Linking to the User model
  filter   Json // Storing JSON data type for complex filtering details
  group_by GroupBy // Enum type, define this based on the possible values
  sort     Json // Storing JSON data type for sorting details

  // Define the relationship to the User model
  owner User @relation(fields: [owner_id], references: [userId])

  // Assuming we might have related tasks or events
  tasks  Task[]
  events Event[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  PlanEditor PlanEditor[]
}

// Enum for group_by field, adjust the values according to your specific needs
enum GroupBy {
  Type
  Date
  Priority
  // Add other grouping options as per your requirements
}

// Assuming Task and Event models exist and are related to Plan
model Task {
  task_id     String    @id @default(uuid())
  title       String
  description String?
  is_done     Boolean
  priority    Int
  reminders   Int
  ignore_time Boolean
  start_date  DateTime?
  end_date    DateTime?
  owner_id    String
  category_id String?
  plan_id     String?

  owner      User         @relation(fields: [owner_id], references: [userId])
  category   Category?    @relation(fields: [category_id], references: [Id])
  plan       Plan?        @relation(fields: [plan_id], references: [plan_id])
  TaskEditor TaskEditor[]
}

model Category {
  Id   String @id @default(uuid())
  name String

  // Assuming TaskCategory has a relation to Task where multiple tasks can belong to a single category
  tasks Task[] // This relation needs to be defined in the Task model as well
}

model TaskEditor {
  task_id String
  user_id String

  task Task @relation(fields: [task_id], references: [task_id])
  user User @relation(fields: [user_id], references: [userId])

  @@id([task_id, user_id])
}

model PlanEditor {
  plan_id String
  user_id String

  plan Plan @relation(fields: [plan_id], references: [plan_id])
  user User @relation(fields: [user_id], references: [userId])

  @@id([plan_id, user_id])
}
