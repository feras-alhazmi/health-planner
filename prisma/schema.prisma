generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthUser {
  Id        String   @id @default(uuid())
  email     String   @unique
  password  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  salt      String
  user      User?
}

model User {
  userId           String            @id @unique
  fullName         String?
  lastname         String?
  phone            String?
  dateOfBirth      DateTime?
  bio              String?
  gender           Gender?
  diagnosis        String?
  address          String?
  healthBarriers   String[]          @default([""])
  avatarUrl        String?
  timezone         String?
  language         Language          @default(EN)
  year             Int?
  roles            Role              @default(PATIENT)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  lastActiveAt     DateTime?
  email            String            @unique
  Event            Event[]
  medicalHistory   MedicalHistory?
  Plan             Plan[]
  PlanEditor       PlanEditor[]
  Task             Task[]
  TaskEditor       TaskEditor[]
  user             AuthUser          @relation(fields: [userId], references: [Id])
  userMeasurements UserMeasurements?
  userMedications  UserMedications?
}

model MedicalHistory {
  Id                     String                  @id @default(uuid())
  historyName            String
  userId                 String                  @unique
  user                   User                    @relation(fields: [userId], references: [userId])
  medicalHistoryDiseases MedicalHistoryDisease[]
  diseases               Disease[]               @relation("MedicalHistoryDisease")
}

model Disease {
  Id                     String                  @id @default(uuid())
  diseaseName            String
  description            String?
  medicalHistoryDiseases MedicalHistoryDisease[]
  histories              MedicalHistory[]        @relation("MedicalHistoryDisease")
}

model Medications {
  Id                   String            @id @default(uuid())
  medicationName       String
  status               Status
  dosage               String
  frequency            String
  prescribingPhysician String
  startDate            DateTime
  endDate              DateTime?
  userMedications      UserMedications[] @relation("MedicationsToUserMedications")
}

model UserMedications {
  Id          String        @id @default(uuid())
  userId      String        @unique
  user        User          @relation(fields: [userId], references: [userId])
  medications Medications[] @relation("MedicationsToUserMedications")
}

model Measurements {
  Id                 String           @id @default(uuid())
  name               String
  icon               String
  measurementType    MeasurementType
  measurementValue   Int
  measurementUnit    String
  measuredOn         DateTime
  createdAt          DateTime         @default(now())
  userMeasurementsID String
  UserMeasurements   UserMeasurements @relation(fields: [userMeasurementsID], references: [Id])
}

model UserMeasurements {
  Id           String         @id @default(uuid())
  userId       String         @unique
  measurements Measurements[]
  user         User           @relation(fields: [userId], references: [userId])
}

model Event {
  Id          String   @id @default(uuid())
  userId      String
  date        DateTime
  name        String
  planPlan_id String?
  Plan        Plan?    @relation(fields: [planPlan_id], references: [plan_id])
  user        User     @relation(fields: [userId], references: [userId])
}

model MedicalHistoryDisease {
  medicalHistoryId String
  diseaseId        String
  disease          Disease        @relation(fields: [diseaseId], references: [Id])
  medicalHistory   MedicalHistory @relation(fields: [medicalHistoryId], references: [Id])

  @@id([medicalHistoryId, diseaseId])
}

model Plan {
  plan_id    String       @id @default(uuid())
  name       String
  owner_id   String
  filter     Json?
  group_by   GroupBy?
  sort       Json?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  events     Event[]
  owner      User         @relation(fields: [owner_id], references: [userId])
  PlanEditor PlanEditor[]
  tasks      Task[]
}

model Task {
  task_id     String       @id @default(uuid())
  title       String
  description String?
  is_done     Boolean      @default(false)
  priority    Int          @default(0)
  reminders   Int          @default(0)
  ignore_time Boolean      @default(true)
  start_date  DateTime?
  end_date    DateTime?
  owner_id    String
  category_id String?
  plan_id     String?
  createdAt   DateTime     @default(now())
  category    Category?    @relation(fields: [category_id], references: [Id])
  owner       User         @relation(fields: [owner_id], references: [userId])
  plan        Plan?        @relation(fields: [plan_id], references: [plan_id])
  TaskEditor  TaskEditor[]
}

model Category {
  Id    String @id @default(uuid())
  name  String
  tasks Task[]
}

model TaskEditor {
  task_id String
  user_id String
  task    Task   @relation(fields: [task_id], references: [task_id])
  user    User   @relation(fields: [user_id], references: [userId])

  @@id([task_id, user_id])
}

model PlanEditor {
  plan_id String
  user_id String
  plan    Plan   @relation(fields: [plan_id], references: [plan_id])
  user    User   @relation(fields: [user_id], references: [userId])

  @@id([plan_id, user_id])
}

enum Gender {
  MALE
  FEMALE
}

enum Language {
  EN
  Arabic
}

enum Role {
  PATIENT
  DOCTOR
}

enum MeasurementType {
  weight
  blood_pressure_systolic
  blood_pressure_diastolic
  BMI
}

enum Status {
  Active
  Discontuned
  On_Hold
}

enum GroupBy {
  Type
  Date
  Priority
}
